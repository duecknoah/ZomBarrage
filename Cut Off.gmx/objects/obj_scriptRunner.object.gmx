<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// script runner makes it so you can add a ds_list with the script you want
// to run and its arguments. This is all contained
// within the script list of type ds_list. To add a script to keep running:
//      MyScript = ds_list_create();
//      scr_scriptRunnerAddScript(script, arg0, arg1, ...);
// In other words, you can make a line of code trigger only once (the line
// that runs your script with the scriptRunner) and it will continue to run
// until it returns true). Not only that, obj_scriptRunner can run an unlimited
// amount of scripts simultaneously. This is mainly used in areas where you want
// a script to keep running when a timeline event triggers (for cutscenes)

// NOTE: the script will run forever until it returns true, which in that
// case it will be removed from the script list and will stop running

// Example
// script list:
// 0 - ds_list
//          - 0 - "scr_guiForegroundFadeIn"
//          - 1 - 4
// 1 - ds_list
//          - 0 - "scr_addFoo"
//          - 1 - 98.5
//          - 2 - true
//
scriptList = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run scripts in step event

var removalList = ds_list_create(); // a list of the indexes within scriptList for which scripts have finished executing. They will be deleted at end of the for loop

for (var i = 0; i &lt; ds_list_size(scriptList); i ++) {
    var _innerList = scriptList[| i];
    var returnedTrue = false;
    
    // Go through all possible argument amounts (0-16)
    switch (ds_list_size(_innerList)) {
        case 1: // only script provided with 0 arguments
            if (script_execute(asset_get_index(_innerList[| 0]))) {
                returnedTrue = true;
            }
        break;
        case 2: // script provided with 1 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1])) {
                returnedTrue = true;
            }
        break;
        case 3: // script provided with 2 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2])) {
                returnedTrue = true;
            }
        break;
        case 4: // script provided with 3 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3])) {
                returnedTrue = true;
            }
        break;
        case 5: // script provided with 4 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4])) {
                returnedTrue = true;
            }
        break;
        case 6: // script provided with 5 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5])) {
                returnedTrue = true;
            }
        break;
        case 7: // script provided with 6 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6])) {
                returnedTrue = true;
            }
        break;
        case 8: // script provided with 7 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7])) {
                returnedTrue = true;
            }
        break;
        case 9: // script provided with 8 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7], _innerList[| 8])) {
                returnedTrue = true;
            }
        break;
        case 10: // script provided with 9 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7], _innerList[| 8], _innerList[| 9])) {
                returnedTrue = true;
            }
        break;
        case 11: // script provided with 10 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7], _innerList[| 8], _innerList[| 9], _innerList[| 10])) {
                returnedTrue = true;
            }
        break;
        case 12: // script provided with 11 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7], _innerList[| 8], _innerList[| 9], _innerList[| 10], _innerList[| 11])) {
                returnedTrue = true;
            }
        break;
        case 13: // script provided with 12 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7], _innerList[| 8], _innerList[| 9], _innerList[| 10], _innerList[| 11], _innerList[| 12])) {
                returnedTrue = true;
            }
        break;
        case 14: // script provided with 13 arguments
            if (script_execute(asset_get_index(_innerList[| 0]), _innerList[| 1], _innerList[| 2], _innerList[| 3], _innerList[| 4], _innerList[| 5], _innerList[| 6], _innerList[| 7], _innerList[| 8], _innerList[| 9], _innerList[| 10], _innerList[| 11], _innerList[| 12], _innerList[| 13])) {
                returnedTrue = true;
            }
        break;
        default: // Nothing or too much was provided, so lets mark this as a completed script just to remove it in the removalList
            returnedTrue = true;
    }
    
    if (returnedTrue) {
        ds_list_add(removalList, i);
    }
}

// Go through the removal list and delete all of the indexes within scriptList that the removal_list points too
var removalListSize = ds_list_size(removalList);
for (var i = removalListSize - 1; i &gt;= 0; i --) {
    // The for loop works backwards as removing an entry from the scriptList shuffles all the preceding
    // lists within scriptList to move down by 1 to take over that removed entry spot. So working backwards
    // prevents the removalList from pointing to the wrong index after one of those moves.
    var index = removalList[| i];
    var _innerList = scriptList[| index]; // the inner list within script_list
    show_debug_message("Removing script: " + _innerList[| 0] + " from scriptList"); // the script name is always index 0 within the innerList
    ds_list_delete(scriptList, index);
}

ds_list_destroy(removalList); // free the removal list from mem
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove scriptList from mem at end of game
ds_list_destroy(scriptList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
