<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lightIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars and settings
radius = 255; // the radius of the light (default 255)
orgRadius = noone;
isOn = true; // is light on?
//image_blend = c_white; // color of the light
orgColor = noone; // original color, used in fading out brightness of color
fadeTime = -1; // time it takes to fade out in seconds (-1 if no fade)
orgFadeTime = noone; // original fade time, used in fading out
parent = noone; // parent instance to follow
flicker = false; // if true, light flickers (used for fire)
drawLightFlare = false; // draw second light flare in front of everything?

init = true; // creation code event runs after Create Event and before the Step event, so
             // we finish initing some things in the step event that get effected by things
             // in the creation code in a room
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the light on the light surface
if (init) {
    orgRadius = radius;
    orgColor = image_blend; // original color, used in fading out brightness of color
    orgFadeTime = fadeTime; // original fade time, used in fading out
    init = false;
}

// If light is on
if (isOn) {
    // Since the surface is drawn inverted, we invert this before hand to be brighter when drawn
    draw_set_blend_mode(bm_subtract);
    surface_set_target(obj_env_light.surface);
    var centerX = x - view_xview[0];
    var centerY = y - view_yview[0];
    var x1 = centerX - (radius / 2);
    var y1 = centerY - (radius / 2);
    var x2 = centerX + (radius / 2);
    var y2 = centerY + (radius / 2);
    draw_ellipse_colour(x1, y1, x2, y2, image_blend, c_black, 0);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
    
    // if using fade time to fade out and destroy light
    if (fadeTime != -1) {
        fadeTime -= 1/room_speed;
        if (fadeTime &lt;= 0) {
            instance_destroy();
            exit;
        }
         //image_blend = scr_addBrightnessToCol(color, colour_get_value(orgColor) / orgFadeTime);
         image_blend = scr_addBrightnessToCol(image_blend, -12);
        
    }
    
    // If color is completly dark, remove the light
    if (image_blend == 0) {
        instance_destroy();
    }
    
    if (flicker) {
        var flickerAmt = orgRadius / 16;
        radius = clamp(radius + random_range(-flickerAmt, flickerAmt), orgRadius - flickerAmt, orgRadius + flickerAmt);
    }
}    
// If light has a parent, follow it
if (parent != noone) {
    if (instance_exists(parent)) {
        x = parent.x;
        y = parent.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw a light flare (if enabled) on top of surface light
if (drawLightFlare &amp;&amp; isOn) {
    var rad = 64;
    var halfRad = rad / 2;
    draw_set_blend_mode(bm_add);
    draw_set_alpha(0.5);
    draw_ellipse_colour(x - halfRad, y - halfRad, x + halfRad, y + halfRad, image_blend, c_black, 0);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
