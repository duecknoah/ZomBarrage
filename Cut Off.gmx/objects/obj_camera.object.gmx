<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the cursor for the game and variables
// Variables
cameraShake = 0; // when set, camera will shake until this number is 0
show_debug_message(object_get_name(object_index) + " created");

window_set_cursor(cr_cross);

// Setup Camera start transition
view_wviewOrg = view_wview[0];
view_hviewOrg = view_hview[0];
view_wview[0] = view_wviewOrg / 80;
view_hview[0] = view_hviewOrg / 45; // def 45
zoom = 1; // 1 means default zoom, 2 is double zoomed in, must be &gt;= 1
// Instantly line up view initially, then tween camera after
if (instance_exists(obj_player)) {
    scr_viewFollow(obj_player.x, obj_player.y, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make view follow player
// When room starts, zoom out from player (finish map-game transition)
// Consistent Aspect ratio calculations:
// width: set to whatever as height will adjust accordingly.
// height: (original height / original width) x new width = new height
/*
view_wview[0] += ceil((view_wviewOrg - view_wview[0]) * 0.0025);
var _newH = (view_hviewOrg / view_wviewOrg) * view_wview[0];
view_hview[0] = _newH;
*/

// Zoom control (tweens when zoom is set)
// Zoom is 0.25-infinity where 1 is 0.25:1 in game pixels and 2 is 2:1 pixels in game
view_wview[0] += ceil((view_wviewOrg / zoom) - view_wview[0]) * 0.0075;
//view_wview[0] = view_wviewOrg / zoom;
var newH = (view_hviewOrg / view_wviewOrg) * view_wview[0];
view_hview[0] = newH;
// Round the width and height of the view by &lt;decimalPlaces&gt; decimal places.
var decimalPlaces = 1; 
view_wview[0] = round(view_wview[0] * power(10, decimalPlaces)) / power(10, decimalPlaces); // round 
view_hview[0] = round(view_hview[0] * power(10, decimalPlaces)) / power(10, decimalPlaces);

// Make the lowest value of zoom be 0.25
if (zoom &lt; 0.25) {
    zoom = 0.25;
}

// Player following
if (instance_exists(obj_player)) {
    // Make view follow player with mouse partially affecting it
    var mouseXRelative = (mouse_x - obj_player.x);
    var mouseYRelative = (mouse_y - obj_player.y);
    var camFollowX = obj_player.x + (mouseXRelative / 6);
    var camFollowY = obj_player.y + (mouseYRelative / 6);
    
    scr_viewFollow(camFollowX, camFollowY, 0.075 * global.timeScale);
}

// Camera shake
if (cameraShake != 0) {
    view_xview[0] += random_range(-cameraShake, cameraShake);
    view_yview[0] += random_range(-cameraShake, cameraShake);
    cameraShake *= 0.75;
}

// zoom in when player dies
if (global.gameOver) {
    scr_cameraZoom(2);
}

view_xview[0] = round(view_xview[0]);
view_yview[0] = round(view_yview[0]);

// Only round width and height if zoom is very far in, this is 
// done to prevent weird lines to show up
if (zoom &gt; 1.5) {
    view_wview[0] = round(view_wview[0]);
    view_hview[0] = round(view_hview[0]);
}
x = view_xview[0];
y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
