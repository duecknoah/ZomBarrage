<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_propComputerChair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sitting vars
entitySitting = noone; // the entity id of the entity using this chair
xPreviousEntitySitting = -1; // the x pos just before the entity got on (used for getting off)
yPreviousEntitySitting = -1; // the y pos just before the entity got on (used for getting off)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// toggle player sitting with mouse only if within distance, not prevented controls, and mouse is on chair
if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; distance_to_object(obj_player) &lt; 24
    &amp;&amp; !global.preventPlayerControls &amp;&amp; !global.preventEntityMovement) {
    if (obj_player.sittingOnEntity == noone) {
        image_blend = c_green;
        if (mouse_check_button_pressed(obj_controls.actionButton)) {
            obj_player.sittingOnEntity = id;
            entitySitting = obj_player.id;
            xPreviousEntitySitting = entitySitting.x;
            yPreviousEntitySitting = entitySitting.y;
        }
    }
    else {
        image_blend = c_red;
        if (mouse_check_button_pressed(obj_controls.actionButton)) {
        obj_player.sittingOnEntity = noone;
        obj_player.x = xPreviousEntitySitting;
        obj_player.y = yPreviousEntitySitting;
        entitySitting = noone;
        }
    }
}
else image_blend = c_white;

// move rotation based on entity sitting on this's rotation
if (entitySitting != noone) {
    image_angle = entitySitting.rotation;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
