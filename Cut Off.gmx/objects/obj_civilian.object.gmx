<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_civilianCollision</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

hairCol = make_colour_hsv(24, 100, random(200));
skinCol = make_colour_hsv(24, 100, random(200));
bodyCol = make_colour_rgb(random(255), random(255), random(255));

scr_initEntityVars();
state = "wander";
path = path_add();
wanderX = noone;
wanderY = noone;
wanderMaxTime = room_speed * 10;
wanderTimer = 0;
lookAtEntity = noone; // entity to look at
lookAtTimer = 0; // time to look at entity
image_xscale = 0.85;
image_yscale = 0.85;

hat = choose(noone, sprite_get_number(spr_hat) - 1); // choose a random hat or no hat
hair = choose(noone, sprite_get_number(spr_CivilianHair) - 1); // choose a random hairstyle or no hair
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If a zombie is targeting this, make that zombies target noone
with (obj_zombie) {
    // If target is this, make it noone
    if (target == other.id) {
        target = noone;
    }
}

with (obj_civilian) {
    // If lookAtEntity is this, make it noone
    if (lookAtEntity == other.id) {
        lookAtEntity = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NPC states
switch (state) {
    case "wander":
        if (wanderTimer &lt;= 0) {
            var foundFreeCell = false;
            while (!foundFreeCell) {
                wanderX = x + random_range(-256, 256);
                wanderY = y + random_range(-256, 256);
                // If that random point is a free cell, go to it
                if (mp_grid_get_cell(global.grid, wanderX div obj_navGrid.cell_width, wanderY div obj_navGrid.cell_height) != -1) {
                    foundFreeCell = true;
                    wanderX = (wanderX div obj_navGrid.cell_width) * obj_navGrid.cell_width + (obj_navGrid.cell_width / 2);
                    wanderY = (wanderY div obj_navGrid.cell_height)* obj_navGrid.cell_height + (obj_navGrid.cell_height / 2);
                }
            }
            wanderTimer = random(wanderMaxTime);
        }
        scr_entityMoveTo(wanderX, wanderY, 1, id, true);
    break;
}

// Auto open and close doors when civilian walks by or through them
with (obj_propDoor) {
    var doorOpenDistance = 16;
    var doorCloseDistance = doorOpenDistance + 16;
    if (distance_to_point(other.x, other.y) &lt; doorOpenDistance) {
        open = true;
    }
    else if (distance_to_point(other.x, other.y) &lt; doorCloseDistance) { 
        open = false;
    }
}

scr_doEntityFuncs();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update wander timer
wanderTimer --;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw parts of civilian

// if entity is not being pushed, rotate based on move direction
if (!scr_isBeingPushed(id) &amp;&amp; global.timeScale != 0) {
    // If entity is moving either via path or backupPathfinding (x and y vals change)
    // This is done to not change rotation when npc is stationary, else npc always faces
    // at 0 degrees when stopped
    if (path_position != path_positionprevious || x != xprevious || y != yprevious) {
        // Then update rotation
        rotation += ((point_direction(xprevious, yprevious, x, y) - 90) - rotation) * 0.25;
    }
    else {
        // Else have random chances of entity looking around at another entity (rotating in position) since we know entity
        // is stationary
        var chanceOfLookAt = 5; // percent change of random rotation per step
        if (round(random(100 - chanceOfLookAt)) == 0 &amp;&amp; lookAtTimer &lt;= 0) {
            lookAtTimer = random_range(room_speed, room_speed * 7);
            
            // Time to choose which entity to look at
            switch (round(random(1))) {
                case 0: 
                    lookAtEntity = instance_nearest(x, y, obj_player);
                break;
                case 1:
                    var closestDist = -1;
                    var closestCiv = noone;
                    
                    // Find the closest civilian to this one
                    for (var i = 0; i &lt; instance_number(obj_civilian); i ++) {
                        var inst = instance_find(obj_civilian, i);
                        
                        // Check to make sure we are not including self in check
                        if (inst.id == id) {
                            continue;
                        }
                        
                        // If the closest distance hasn't been determined yet, then
                        // this is the closest distance
                        if (closestCiv == noone) {
                            closestDist = distance_to_point(inst.x, inst.y);
                            closestCiv = inst;
                        }
                        else {
                        // If the closest distance has been determined, than check if this
                        // distance between self and another civlian is closer than the closest
                        // civilian to self so far
                            var dist = distance_to_point(inst.x, inst.y);
                            // If this civilian is closer than the other civilian, count
                            // this civilian to have the closest distance
                            if (dist &lt; closestDist) {
                                closestDist = dist;
                                closestCiv = inst;
                            }
                        }   
                    }
                    lookAtEntity = closestCiv;
                break;
                default:
                    lookAtEntity = noone;
                    lookAtTimer = 0;
            }
        }
       // Timer to stare at a specific entity, only stare when stationary
        if (lookAtTimer &gt; 0) {
            if (lookAtEntity != noone) {
                // Then update rotation
                rotation += ((point_direction(x, y, lookAtEntity.x, lookAtEntity.y) - 90) - rotation) * 0.25;
            }
            lookAtTimer --;
        }
    }
}

// shadow
draw_sprite_ext(spr_shadow, 0, x, y, image_xscale, image_yscale, 0, c_white, 1);

// Body
draw_sprite_ext(spr_CivilianFistsBody, 0, x, y, drawScale, drawScale, rotation, bodyCol, 1);

// skin
draw_sprite_ext(spr_CivilianFistsSkin, 0, x, y, drawScale, drawScale, rotation, skinCol, 1);

// hair
scr_drawHair(0, 0, hairCol);

// hat
scr_drawHat(0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
