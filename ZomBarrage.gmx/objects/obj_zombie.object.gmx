<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombieCollision</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_zombieP</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create navPath and set variables
event_inherited(); // init character and zombie variables
maxHp = global.currentWave * 5 + 5;
hp = maxHp;
isCrawler = false; // is this a zombie crawler?
image_xscale = 0.85;
image_yscale = 0.85; // be smaller than 1 to fix between doors
// Zombie yell timer
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On death, have chance of dropping a loot key
var lootKeyChance = 12; // default 1 out of 12

if (round(random(lootKeyChance)) == 0) {
    scr_createWeapon(x, y, scr_WeaponNameToId("Loot Key"), 1);
}

scr_createZombieBodyAt(x, y, rotation + 90);
var points = 1;
scr_createPointsText(x, y, "+" + string(points), c_lime);
obj_player.points += points; // give points to player on death

// Chance of playing Death sound
if (random(1) &lt; 0.75) {
    var growlType = choose(snd_zombie_growl_short_1, snd_zombie_growl_short_2, snd_zombie_growl_short_3, snd_zombie_growl_short_4);
    audio_play_sound_on(s_emit, growlType, false, 7);
}

// Destroy inherited stuff
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zombie growl
var growlType = choose(snd_zombie_growl_1, snd_zombie_growl_2, snd_zombie_growl_3, snd_zombie_growl_4);
if (audio_is_playing(growlType)) {
    exit;
}
audio_play_sound_on(s_emit, growlType, false, 7);
alarm[0] = random_range(room_speed * 8, room_speed * 20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create the path and move to the player
event_inherited();

// don't run movement code if movement prevented
if (global.preventEntityMovement) {
    exit;
}
// If a crawler, make it slower
if (isCrawler) {
    moveSpd = 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!other.isHurt &amp;&amp; !obj_guiController.showConsole) {
    scr_hurt(other.id, 3); // do 3 damage to the player
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if entity is not being pushed, rotate based on move direction
if (!scr_isBeingPushed(id) &amp;&amp; global.timeScale != 0) {
    rotation += ((point_direction(xprevious, yprevious, x, y) - 90) - rotation) * 0.25;
}

// Draw shadow
draw_sprite_ext(spr_shadow, 0, x, y, image_xscale, image_yscale, 0, c_white, 1);
// Draw self
if (!isCrawler) {
    draw_sprite_ext(spr_zombie, image_index, x, y, drawScale, drawScale, rotation, c_white, 1);
}
else { // If a crawler zombie
    image_speed = 7.03 * global.timeScale;
    draw_sprite_ext(spr_zombieCrawler, image_index, x, y, image_xscale, image_yscale, rotation, c_white, 1);
}

// Draw hat
scr_drawHat(0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
