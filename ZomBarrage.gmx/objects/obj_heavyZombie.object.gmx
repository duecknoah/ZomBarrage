<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_heavyZombieWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_zombieP</parentName>
  <maskName>spr_heavyZombieCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create navPath and set variables
event_inherited();
maxHp = global.currentWave + 30;
hp = maxHp;
movementSpd = 0.25;
hasPunched = false; // turns true to prevent many scr_hurts during punch, becomes false after punch animation ends
state = "default";
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On death, have chance of dropping a loot key
var lootKeyChance = 12; // default 1 out of 12

if (round(random(lootKeyChance)) == 0) {
    scr_createWeapon(x, y, scr_WeaponNameToId("Loot Key"), 1);
}

with (instance_create(x, y, obj_zombieGore)) {
    partAmt = round(random_range(4, 8));
}

scr_createZombieBodyAt(x, y, rotation + 90);

var points = 1;
scr_createPointsText(x, y, "+" + string(points), c_lime);
obj_player.points += points; // give points to player on death
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create the path and move to the player

// don't run movement code if movement prevented
event_inherited(); // do character and zombie functions

if (global.preventEntityMovement) {
    exit;
}

switch (state) {
    case "default": // no target currently
        // If there is a target, change state to chase
        image_speed = 0;
        image_index = 0;
        sprite_index = spr_heavyZombieWalk;
        if (target != noone) {
            state = "chase";
        }
    break;
    case "chase":
        // If lost target, change state back to
        // default
        image_speed = 0.25;
        sprite_index = spr_heavyZombieWalk;
        if (target == noone) {
            state = "default";
        }
        if (distance_to_point(target.x, target.y) &lt; 25) {
            // throw punch
            state = "punch";
            image_index = 0;
        }
    break;
    case "punch":
        // Swinging punch at target
        // move forward when swinging
        if (image_index &gt; 1.5 &amp;&amp; image_index &lt; 2.25) {
            path_speed = 1.5;
        }
        else {
            path_speed = 0;
        }
        
        // Do punch
        if (image_index &gt; 2 &amp;&amp; !hasPunched) {
            var punchX = x + lengthdir_x(16, rotation);
            var punchY = y + lengthdir_y(16, rotation);
            scr_hurtRadius(punchX, punchY, 20, 64, 4, false, true, false);
            hasPunched = true;
        }
        sprite_index = spr_heavyZombieSwing;
        image_speed = 0.025 * global.timeScale;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State animation cancel looping or not

switch (state) {
    case "punch":
        // Swinging punch at target
        state = "default";
        hasPunched = false; // reset
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == "punch") {
    //rotation += ((point_direction(x, y, target.x, target.y) - 90) - rotation) * 0.25;
    rotation = point_direction(x, y, target.x, target.y) - 90;
}
else if (!scr_isBeingPushed(id) &amp;&amp; global.timeScale != 0) {
    // if entity is not being pushed, rotate based on move direction
    rotation += ((point_direction(xprevious, yprevious, x, y) - 90) - rotation) * 0.25;
}

// Draw shadow
draw_sprite_ext(spr_shadow, 0, x, y, image_xscale * 2, image_yscale * 2, 0, c_white, 1);
// Draw self
draw_sprite_ext(sprite_index, image_index, x, y, drawScale, drawScale, rotation, c_white, 1);
//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
