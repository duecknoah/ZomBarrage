<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_characterP</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init zombies
event_inherited(); // init character variables
path = path_add();
target = noone; // target to go to
maxHp = global.currentWave + 5;
hp = maxHp;
moveSpd = 0.80; // move speed of zombie
doBackupPathfinding = false; // used if can't path to player (wall in way)
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play gore death sound
var goreType = choose(snd_gore_normal_1, snd_gore_normal_2, snd_gore_normal_3);
audio_play_sound_at(goreType, x, y, 0, 100, 300, 1, false, 5);

// Clear audio emitter from mem
if (audio_emitter_exists(s_emit)) {
    audio_emitter_free(s_emit);
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfind to player
/// create the path and move to the player
event_inherited();

// don't run movement code if movement prevented
if (global.preventEntityMovement) {
    exit;
}

// If zombie has a target to chase
if (target != noone &amp;&amp; instance_exists(target)) {
    var px = (target.x div 16)* 16 + 8;
    var py = (target.y div 16)* 16 + 8;
    
    var stepSpd = moveSpd * global.timeScale;
    
    if (global.navUpdateRateTimer == 0) {
        if (!path_exists(path)) {
            path = path_add();
        }    
    
        // End path and clear self from the path to not see self as a collision and setup new collisions
        path_end();
        mp_grid_clear_cell(global.grid, x div obj_navGrid.cell_width, y div obj_navGrid.cell_height);
        
        // Make a path to the target
        if (mp_grid_path(global.grid, path, x, y, px, py, 1)) {
            // Since able to, Start the path and add a cell where self is going to be net navUpdate,
            // this would prevent other zombies from colliding into this one on next navUpdate.
            path_start(path, stepSpd, 0, false);
            
            // Calc next path pos to claim that zone so other zombies don't run into it
            var _nextPoint = (1 / path_get_number(path)) * (path_position + 1);
            var _nextPointX = path_get_x(path, _nextPoint);
            var _nextPointY = path_get_y(path, _nextPoint);
            
            // Make cell claims based on zombie size
            switch (object_index) {
                case obj_heavyZombie: // heavy zombie has a big hitbox, so we want to claim more zones
                    mp_grid_add_rectangle(global.grid, _nextPointX - obj_navGrid.cell_width, 
                                                       _nextPointY - obj_navGrid.cell_height, 
                                                       _nextPointX + obj_navGrid.cell_width, 
                                                       _nextPointY + obj_navGrid.cell_height);
                break;
                default: // default is one cell
                    mp_grid_add_cell(global.grid, _nextPointX div obj_navGrid.cell_width, 
                                                  _nextPointY div obj_navGrid.cell_height);
            }
            //mp_grid_add_cell(global.grid, x div obj_navGrid.cell_width, y div obj_navGrid.cell_height);
            doBackupPathFinding = false;
        }
        else { 
            doBackupPathFinding = true;
        }
    }
    
    // Backup pathfinding ////////////////
    if (doBackupPathFinding) {
        // if can't find a path to player, just move towards player directly
        // move_towards_point(px, py, 1);
        
        // If heading diagonal, make speed slower
        if (y != py &amp;&amp; x != px) {
            stepSpd = 0.5 * global.timeScale;
        }
        
        if (x &lt; px) {
            if (!place_meeting(x + stepSpd, y, obj_collision)) {
                x += stepSpd;
            }
        }
        else if (x &gt; px) {
            if (!place_meeting(x - stepSpd, y, obj_collision)) {
                x -= stepSpd;
            }
        }
        if (y &lt; py) {
            if (!place_meeting(x, y + stepSpd, obj_collision)) {
                y += stepSpd;
            }
        }
        else if (y &gt; py) {
            if (!place_meeting(x, y - stepSpd, obj_collision)) {
                y -= stepSpd;
            }
        }
    }
    
    // If zombies only see there nearby surroundings
    if (!obj_navGrid.zombiesSeeEverywhere) {
        // Check if target is out of view range / see distance
        var seeDist = 512;
        if (distance_to_point(target.x, target.y) &gt; seeDist) {
            target = noone;
        }
    }
}
else { 
    if (obj_navGrid.zombiesSeeEverywhere) {
    // If there is no current set target for the zombie, target a
    // random person.
        var instType = random(1);
        var chancePlayer = 0.50; // the % chance the zombie will target the player instead of a civilian
        
        // If instance type is player and player does exist, or if a civilian does not exist
        if ((instType &lt;= chancePlayer &amp;&amp; instance_exists(obj_player)) || !instance_exists(obj_civilian)) {
        // Target player
            target = obj_player.id;
        }
        
        // If instance type is civilian and civilian exists
        if (instType &gt; chancePlayer &amp;&amp; instance_exists(obj_civilian)) {
        // Target civilian
            target = instance_find(obj_civilian, round(random(instance_number(obj_civilian))));
        }
    }
    else {
    // If there is no target for zombie, keep an eye out for one
    // If there is a nav update, look for closest target.
    // This is where the zombies finds someone to go after
        if (global.navUpdateRateTimer == 0) {  
            var listOfClosestEnts = ds_list_create();
            var seeDist = 512;
            
            // Civilians
            for (var i = 0; i &lt; instance_number(obj_civilian); i ++) {
                var inst = instance_find(obj_civilian, i);
                
                // First check if already dead, if so, don't count as a target
                if (inst.isDead) {
                    continue;
                }
                
                // If target in view distance
                if (distance_to_point(inst.x, inst.y) &lt; seeDist) {
                    // If no collisions between the zombie and the civilian (in the open)
                    if (!collision_line(x, y, inst.x, inst.y, obj_collision, 0, 0)) {
                        ds_list_add(listOfClosestEnts, inst);
                    }
                }
            }
            // Player
            if (distance_to_point(x, y) &lt; seeDist) {
                // If no collisions between the zombie and the civilian (in the open)
                if (!collision_line(x, y, obj_player.x, obj_player.y, obj_collision, 0, 0)) {
                    ds_list_add(listOfClosestEnts, obj_player);
                }
            }
            
            // Loop through all entitys in view and find the closest one
            var size = ds_list_size(listOfClosestEnts);
            var closestEnt = noone;
            var closestDist = -1;
            
            // Find the closest entity to self
            for (var i = 0; i &lt; size; i ++) {
                var inst = listOfClosestEnts[| i];
                
                // If the closest distance hasn't been determined yet, then
                // this is the closest distance
                if (closestEnt == noone) {
                    closestDist = distance_to_point(inst.x, inst.y);
                    closestEnt = inst;
                }
                else {
                // If the closest distance has been determined, than check if this
                // distance between self and another civlian is closer than the closest
                // civilian to self so far
                    var dist = distance_to_point(inst.x, inst.y);
                    // If this civilian is closer than the other civilian, count
                    // this civilian to have the closest distance
                    if (dist &lt; closestDist) {
                        closestDist = dist;
                        closestEnt = inst;
                    }
                }   
            }
            
            // If there is a closest entity available
            if (closestEnt != noone) {
                target = closestEnt; // target it
            }
            ds_list_destroy(listOfClosestEnts);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_civilian">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If civilian is not hurt and not dead, hurt them
if (!isDead) {
    if (!other.isHurt) {
        scr_addForce(other.id, 1 * 2, 1 * 2);
        scr_hurt(other.id, 5); // do 5 damage to the civilian
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If player is not hurt and not viewing console, hurt them
if (!other.isHurt &amp;&amp; !obj_guiController.showConsole) {
    //var playerXSpd = other.x - other.xprevious; // Player
    //var playerYSpd = other.y - other.yprevious;
    var xSpd = x - xprevious; // Self
    var ySpd = y - yprevious;

    scr_addForce(other.id, xSpd * 2, ySpd * 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
