<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectileP</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars
startX = x;
startY = y;
bulletMaxDist = 100;
bulletMinDist = 50;
bulletDir = 0; // bullet direction
creator = 0; // creator of this bullet
alpha = 0.8; // inital alpha
damage = 1; // damage of bullet, set in shot, this is default
lastZombieTouched = noone;

initCalc = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (initCalc) {
    var dist = random_range(bulletMinDist, bulletMaxDist);
    x = lengthdir_x(dist, bulletDir) + x;
    y = lengthdir_y(dist, bulletDir) + y;
    
    // Collision checking
    var closestCollision = -1; // id of closest wall / collision in the bullets direction
    
    if (instance_exists(obj_collision)) {
        with (obj_collision) {
            // If bullets path will collide with this wall
            if (collision_line(other.startX, other.startY, other.x, other.y, obj_collision, false, false) == id) {
                // If no collisions found yet, use this one
                if (closestCollision == -1) {
                    closestCollision = id;
                }
                else if (point_distance(other.startX, other.startY, id.x, id.y) &lt; 
                    point_distance(other.startX, other.startY, closestCollision.x, closestCollision.y)) {
                       closestCollision = id; 
                    }
                }
        }
    }
    
    var travelDist = point_distance(startX, startY, x, y);
    var collisionDist = point_distance(startX, startY, closestCollision.x, closestCollision.y);
    
    show_debug_message(closestCollision);
    
    /* If the bullet is closer to the wall
    than it's own travel distance */
    if (point_distance(startX, startY, x, y) &gt; point_distance(startX, startY, closestCollision.x, closestCollision.y)) {
        /* Using SOH CAH TOA to figure out the length of x
        and y sides with the angle and the hypot. The angle
        is inverted because of the way gamemaker does angles
        compared to sin and cos which is the opposite way. */
       x = (collisionDist * cos(-degtorad(bulletDir))) + startX;
       y = (collisionDist * sin(-degtorad(bulletDir))) + startY;
       //show_debug_message(string(closestCollision) + " " + string(closestCollision.x) + " " + string(closestCollision.y) + " " + string(random(1)));
    }
    
    // If collision with any zombie
    var zCollisionOrder = ds_priority_create(); 
    // order by distance and collision on bullet line before calculating collatoral damage
    with (obj_zombieP) {
        if (collision_line(other.startX, other.startY, other.x, other.y, id, false, false)) {
            var dist = point_distance(other.startX, other.startY, x, y);
            ds_priority_add(zCollisionOrder, id, dist);
        }
    }
    
    // Loop until bullet has used all damage or until there are no more zombies to damage
    while (damage &gt; 0 &amp;&amp; !ds_priority_empty(zCollisionOrder)) {
        // With nearest zombie
        with (ds_priority_find_min(zCollisionOrder)) {
            var dmgDealt = scr_hurt(id, other.damage);
            // Reduce bullet damage based off damage dealt, this degrades every time it goes through a zombie
            other.damage -= dmgDealt;
            other.lastZombieTouched = id;
            // Play bullet hit sound
            audio_play_sound_on(s_emit, choose(snd_body_hit_1, snd_body_hit_2, snd_body_hit_3), false, 6);
        }
        ds_priority_delete_min(zCollisionOrder);
    }
    
    // Remove zCollisionOrder priority queue from mem
    if (ds_exists(zCollisionOrder, ds_type_priority)) {
        ds_priority_destroy(zCollisionOrder);
    }
    
    // Make the bullets final position go no further than the last zombie touched
    if (lastZombieTouched != noone) {
        /* Using SOH CAH TOA to figure out the length of x
        and y sides with the angle and the hypot. The angle
        is inverted because of the way gamemaker does angles
        compared to sin and cos which is the opposite way. */
       var distTo = point_distance(startX, startY, lastZombieTouched.x, lastZombieTouched.y);
       x = (distTo * cos(-degtorad(bulletDir))) + startX;
       y = (distTo * sin(-degtorad(bulletDir))) + startY;
    }
    
    initCalc = false;
}

// Drawing
draw_set_alpha(alpha);
draw_set_color(c_yellow);
//draw_line(startX, startY, x, y);
draw_line_width_colour(startX, startY, x, y, 1, c_yellow, c_white);
draw_set_color(c_white);
draw_set_alpha(1);

if (alpha &lt;= 0) {
    instance_destroy();
}
alpha -= 0.08 * global.timeScale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
