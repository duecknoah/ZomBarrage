<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bigZombieCollision</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create navPath and set variables
scr_initEntityVars();
path = path_add();
maxHp = global.currentWave + 30;
hp = maxHp;
doBackupPathfinding = false; // used if can't path to player (wall in way)
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On death, have chance of dropping a loot key
var lootKeyChance = 12; // default 1 out of 12

if (round(random(lootKeyChance)) == 0) {
    scr_createWeapon(x, y, scr_WeaponToId("Loot Key"), 1);
}

with (instance_create(x, y, obj_zombieGore)) {
    partAmt = round(random_range(4, 8));
}

scr_createZombieBodyAt(x, y, rotation + 90);

var points = 1;
scr_createPointsText(x, y, "+" + string(points), c_lime);
obj_player.points += points; // give points to player on death
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create the path and move to the player

// don't run movement code if movement prevented
if (global.preventEntityMovement) {
    exit;
}

var px = (obj_player.x div 16)* 16 + 8;
var py = (obj_player.y div 16)* 16 + 8;

var spd = 0.5 * global.timeScale;

if (global.navUpdateRateTimer == 0) {
    if (!path_exists(path)) {
        path = path_add();
    }    
 
    // End path and clear self from the path to not see self as a collision and setup new collisions
    path_end();
    mp_grid_clear_cell(global.grid, x div obj_navGrid.cell_width, y div obj_navGrid.cell_height);
    
    // Make a path to the player
    if (mp_grid_path(global.grid, path, x, y, px, py, 1)) {
        // Since able to, Start the path and add a cell where self is going to be net navUpdate,
        // this would prevent other zombies from colliding into this one on next navUpdate.
        path_start(path, spd, 0, false);
        
        // Calc next path pos
        var _nextPoint = (1 / path_get_number(path)) * (path_position + spd);
        var _nextPointX = path_get_x(path, _nextPoint);
        var _nextPointY = path_get_y(path, _nextPoint);
        mp_grid_add_cell(global.grid, _nextPointX div obj_navGrid.cell_width, 
                                      _nextPointY div obj_navGrid.cell_height);
        //mp_grid_add_cell(global.grid, x div obj_navGrid.cell_width, y div obj_navGrid.cell_height);
        doBackupPathFinding = false;
    }
    else { 
        doBackupPathFinding = true;
    }
}

if (doBackupPathFinding) {
    // if can't find a path to player, just move towards player directly
    // move_towards_point(px, py, 1);
    
    // If heading diagonal, make speed slower
    if (y != py &amp;&amp; x != px) {
        spd = 0.5 * global.timeScale;
    }
    
    if (x &lt; px) {
        if (!place_meeting(x + spd, y, obj_collision)) {
            x += spd;
        }
    }
    else if (x &gt; px) {
        if (!place_meeting(x - spd, y, obj_collision)) {
            x -= spd;
        }
    }
    if (y &lt; py) {
        if (!place_meeting(x, y + spd, obj_collision)) {
            y += spd;
        }
    }
    else if (y &gt; py) {
        if (!place_meeting(x, y - spd, obj_collision)) {
            y -= spd;
        }
    }
}

scr_doEntityFuncs();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If player is not hurt and not viewing console, hurt them
if (!other.isHurt &amp;&amp; !obj_guiController.showConsole) {
    var playerXSpd = other.x - other.xprevious;
    var playerYSpd = other.y - other.yprevious;
    var xSpd = x - xprevious;
    var ySpd = y - yprevious;

    scr_addForce(other.id, xSpd * 2, ySpd * 2);
    scr_hurt(other.id, 5); // do 5 damage to the player
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if entity is not being pushed, rotate based on move direction
if (!scr_isBeingPushed(id) &amp;&amp; global.timeScale != 0) {
    rotation += ((point_direction(xprevious, yprevious, x, y) - 90) - rotation) * 0.25;
}

// Draw shadow
draw_sprite_ext(spr_shadow, 0, x, y, image_xscale * 2, image_yscale * 2, 0, c_white, 1);
// Draw self
draw_sprite_ext(spr_bigZombie, image_index, x, y, drawScale, drawScale, rotation, c_white, 1);
//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
