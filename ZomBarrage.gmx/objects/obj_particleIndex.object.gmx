<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init particle systems to store in this index and be used in emitters in other objects
/* This index is important as creating a new particle system for every object is costly,
 * plus, that means each object associated with their particle system must not be destroyed
 * as the particle system somehow gets destroyed permanently and globally.
 *
 * Particle Notes:
 * Static: Static particle objects are objects who have a single emitter for
 *         an entire particle system. They only need to be created
 *         at the start of the room and the game will handle the rest
 *         It is moved around manually and set to
 *         burst to use it. This is much more efficient than dynamic particle systems
 *         as only one instance and one emitter is needed for a whole particle system.
 * Dynamic: dynamic particles are particles that have an emitter for each instance
 *          of themselves. They are used when special events are used for it that
 *          cannot be done just with a single particle emitter. This is
 *          less efficient than static particle systems.
*/


show_debug_message(object_get_name(object_index) + " created");
// Rocket Explosion
    rocketExplosion = part_system_create();
    rocketExplosion = part_type_create();
    part_system_depth(rocketExplosion, -1000000);
    part_type_sprite(rocketExplosion, spr_explosion, false, true, false);
    part_type_orientation(rocketExplosion, 0, 360, 0, 0, 1);
    part_type_size(rocketExplosion, 3, 3.5, 0.15, 0);
    part_type_colour1(rocketExplosion, c_gray);
    part_type_life(rocketExplosion, room_speed * 3, room_speed * 4);
    part_type_alpha2(rocketExplosion, 1, 0);
// Blood spurt
    bloodSpurt = part_system_create();
    bloodSpurt = part_type_create();
    part_system_depth(bloodSpurt, -1);
    part_type_shape(bloodSpurt, pt_shape_square);
    //part_type_orientation(bloodSpurt, 0, 360, 0, 0, 1);
    part_type_size(bloodSpurt, 0.1, 0.2, -0.002, 0);
    part_type_colour2(bloodSpurt, c_red, c_maroon);
    part_type_life(bloodSpurt, 2.5 * room_speed, 3 * room_speed);
    part_type_alpha2(bloodSpurt, 1, 0);
    part_type_direction(bloodSpurt, 0, 360, 0, 0);
    part_type_speed(bloodSpurt, 1, 2, -0.05, 0);
    // Create static particle object
    instance_create(x, y, obj_bloodSpurt);
// Zombie Gore
    zombieGore = part_system_create();
    zombieGore = part_type_create();
    part_system_depth(zombieGore, -1);
    part_type_sprite(zombieGore, spr_zombieGore, false, false, true);
    //part_type_orientation(bloodSpurt, 0, 360, 0, 0, 1);
    part_type_scale(zombieGore, 1.25, 1.25);
    part_type_life(zombieGore, 25 * room_speed, 35 * room_speed);
    part_type_orientation(zombieGore, 0, 360, 0, 0, 0);
    part_type_alpha2(zombieGore, 1, 0);
    part_type_direction(zombieGore, 0, 360, 0, 0);
    part_type_speed(zombieGore, 1, 2, -0.05, 0);
    // Create static particle object
    instance_create(x, y, obj_zombieGore);
// Entity on Fire particle (entity on fire)
    fireSpark = part_system_create();
    fireSpark = part_type_create();
    part_system_depth(fireSpark, -1);
    part_type_scale(fireSpark, 1.25, 1.25);
    part_type_life(fireSpark, 1 * room_speed, 1.25 * room_speed);
    part_type_alpha2(fireSpark, 1, 0);
    part_type_direction(fireSpark, 45, 180 - 45, 0, 0);
    part_type_speed(fireSpark, 0, 0.25, 0.05, 0);
    part_type_sprite(fireSpark, spr_fireSparkParticle, 0, 0, false);
// Test Particle
    testPart = part_system_create();
    testPart = part_type_create();
    testPartEmitter = part_emitter_create(testPart);
    part_system_depth(testPart, -1);
    part_type_sprite(testPart, spr_collision, 0, 0, false);
    part_type_direction(testPart, 45, 180 - 45, 0, 0);
    part_type_life(testPart, room_speed, room_speed * 1.5);
    part_emitter_stream(testPart, testPartEmitter, testPart, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the particle systems
show_debug_message("Destroying particle systems ...");

if (part_system_exists(rocketExplosion)) {
    part_emitter_destroy_all(rocketExplosion);
    part_system_destroy(rocketExplosion);
}
if (part_system_exists(bloodSpurt)) {
    part_emitter_destroy_all(bloodSpurt);
    part_system_destroy(bloodSpurt);
}
if (part_system_exists(zombieGore)) {
    part_emitter_destroy_all(zombieGore);
    part_system_destroy(zombieGore);
}
if (part_system_exists(fireSpark)) {
    part_emitter_destroy_all(fireSpark);
    part_system_destroy(fireSpark);
}

if (part_system_exists(testPart)) {
    part_emitter_destroy_all(testPart);
    part_system_destroy(testPart);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//part_emitter_region(testPart, testPartEmitter, view_xview[0], view_xview[0] + view_wview[0], view_yview[0], view_yview[0] + view_hview[0], ps_shape_rectangle, ps_distr_linear);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy self to run destroy event to free mem
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
