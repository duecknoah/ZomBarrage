<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_itemWeapon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>obj_projectileP</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars
image_index = scr_WeaponNameToId("Molotov Cocktail");
image_speed = 0;
image_xscale = 0.25;
image_yscale = 0.25;
initX = 0; // initial x
initY = 0; // initial y
dir = 0; // direction of molotov toss
dist = 0; // distance of molotov toss
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slowly move its way to the finalx and finaly
image_angle += 2; // rotate as it is being thrown

/* move molotov cocktail towards the final landing coordinates created
 * created from the direction and distance to travel (vector) 
 */
var stepsUntilLand = 60 / global.timeScale;
x += lengthdir_x(dist, dir) / stepsUntilLand;
y += lengthdir_y(dist, dir) / stepsUntilLand;

// Scaling of image, make bigger being thrown into the air, and small when falling
var scaleSpd = 0.035 * global.timeScale;
var centerDist = (dist / 2);
var currentDist = scr_getAbsoluteDistance(initX, initY, x, y);
if (currentDist &lt; centerDist) {
    image_xscale += scaleSpd;
    image_yscale += scaleSpd;
}
else {
    image_xscale -= scaleSpd;
    image_yscale -= scaleSpd;
}

// If past or equal to distance the molotov is supposed to travel
if (scr_getAbsoluteDistance(initX, initY, x, y) &gt;= dist) {
    // destroy self
    var weaponData = scr_IdToWeapon(7);
    scr_createForce(x, y, 1, weaponData[? "radius"], true, true);
    scr_hurtRadius(x, y, weaponData[? "damage"] + obj_player.exploDmg, weaponData[? "radius"], -1, true, true, true);
    scr_createFireRadius(x, y, weaponData[? "fireRadius"], 7);
    instance_destroy();
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
