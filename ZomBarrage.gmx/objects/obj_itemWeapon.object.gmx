<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_itemWeapon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Weapon Type list:
    0 - fists
    1 - Wimps Pistol
    2 - M16
    3 - Rocket Launcher
    4 - Flashlight
    5 - Loot Key
    6 - Sniper Rifle
    7 - Molotov Cocktail
    }
*/

image_speed = 0;
// random weapon by default
weapon = scr_IdToWeapon(floor(random_range(1, obj_weaponDB.totalWeapons - 1)));
initWeapon = true;
// Bobbing of weapon animation (hovering up and down)
var initBobScale = random(0.75); 
image_xscale = initBobScale;
image_yscale = initBobScale;
isBobbingUp = false; // is the weapon bobbing up or down in the animation of image_scale
scaleSpd = 0; // the current speed of increment per step of the scale (like vspeed or hspeed but for scaling)
showOutline = false; // shows outline when player is range of pickup (outline around gun to make it easy to see)
// random bobbing starting position
if (random(1) &lt; 0.5) {
    isBobbingUp = false;
}
else {
    isBobbingUp = true;
}
image_index = weapon[? "id"];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy weapon ds_map
if (ds_exists(weapon, ds_type_map)) {
    ds_map_destroy(weapon);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If a change in weaponType, update the weapon
if (initWeapon) {
    image_index = weapon[? "id"];
    initWeapon = false;
}

// If ds weapon data doesn't exist (ex. loading from save)
if (!ds_exists(weapon, ds_type_map)) {
    // Re-create dynamic data off image_index (id)
    weapon = scr_IdToWeapon(image_index);
}

if (weapon[? "ammo"] == 0) {
    image_alpha = 1;
    image_blend = c_red;
}
else {
    image_alpha = 1;
    image_blend = c_white;
}

showOutline = false; // set to false by default, triggered by player
depth = 0; // resets to default, is only changed when player wants to pick up weapon

// update bobbing
image_xscale += scaleSpd;
image_yscale += scaleSpd;

var currentScale = image_xscale; // xscale and yscale are the same
var maxScale = 0.8;
var minScale = 0.6;

if (isBobbingUp) {
    if (currentScale &lt; maxScale) {
        scaleSpd += 0.0005;
    }
    else {
        isBobbingUp = false;
        scaleSpd /= 2;
    }
}
else {
    if (currentScale &gt; minScale) {
        scaleSpd -= 0.0005;
    }
    else {
        isBobbingUp = true;
        scaleSpd /= 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do destroy event to free ram
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self
// If showOutline (is true when player is in range to pick up gun
// draw with outline
if (showOutline) {
    shader_set(sh_outline);
        var shaderPixelW = shader_get_uniform(sh_outline, "pixelW");
        var shaderPixelH = shader_get_uniform(sh_outline, "pixelH");
        shader_set_uniform_f(shaderPixelW, 0.001);
        shader_set_uniform_f(shaderPixelH, 0.001);
        draw_self();
    shader_reset();
}
else {
// Else draw normally
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
