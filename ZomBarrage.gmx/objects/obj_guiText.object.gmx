<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init text vars
// Note that this text object is drawn within the
// obj_guiController object, but the settings for it
// are stored within this object and can be created
// dynamically anytime
text = "default text";
textX = 0;
textY = 0;
textHAlign = fa_left;
textValign = fa_top;
textAlpha = 1;
textCol = c_white;
font = fnt_normal;
textTimer = 0; // time since birth
// Animations
fadeInTime = 1; // seconds shown in fade in (0 = don't)
fadeOutTime = 1; // seconds shown in fade out (0 = don't)
time = 1; // seconds shown between into and out effects (0 = don't)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations and timing

if (textTimer &lt; fadeInTime) {
    textAlpha = textTimer / fadeInTime;
}
else if (textTimer &lt; fadeInTime + time) {
    textAlpha = 1;
    // do nothing, just show text
}
else if (textTimer &lt;= fadeInTime + time + fadeOutTime) {
    //we use 1 - ... to invert the formula that we used to fade in alpha
    textAlpha = 1 - ((textTimer - fadeInTime - time) / fadeOutTime);
}

// Destroy self when fully faded out or when all time is done
if (textTimer &gt; (fadeInTime + fadeOutTime + time)) {
    instance_destroy();
}

textTimer += 1 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
