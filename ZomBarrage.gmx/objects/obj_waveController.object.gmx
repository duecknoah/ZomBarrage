<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_waveController</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message(object_get_name(object_index) + " created");

global.delayBetweenWaves = 15; // delay between waves in seconds
global.delayBetweenWavesTimer = global.delayBetweenWaves;
global.waveCompleted = false; // is true when wave is just completed, false during a wave
global.currentWave = 0;
global.amtOfWaves = 5; // the amount of waves in order to complete the level (def 5)
global.allWavesDone = false; // is the waves all completed in this level?

// Zombie wave variables
zombiesForWave = 0; // how many more zombies for this wave, increases over time
zombiesIncForWave = 20; // how many zombies to increment per wave (def 20)
zombieSpawnDelay = 1; // 1 second delay per zombie spawn
zombieSpawnDelayTimer = 0;
zombiesSpawned = 0; // keeps track of the amount of zombies spawned so far in the current round
// Spawn chances
heavyZombieSpawnChance = 1 / 100; // 0 - no chance of spawn, 1 - 100% chance of spawn
runnerZombieSpawnChance = 1 / 25; // 0 - no chance of spawn, 1 - 100% chance of spawn
// Spawn chance increases (the amount the chance of spawning increases each round)
heavyZombieSpawnChanceIncrease = 1 / 100;
runnerZombieSpawnChanceIncrease = 1 / 25;
// Other boolean settings
initWave = false; // when true, activates init sequence for wave (when timer is up)
preventSpawn = true; // when true, zombies will not spawn
doErrorCheck = true; // does error checks initially, then doesn't after first step
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zombie wave controlling
// Do initial error check
if (doErrorCheck) {
    if (instance_number(obj_zombieSpawn) == 0) {
        scr_consoleOutPrintln("Error: No Zombie Spawns detected on map!");
    }
    doErrorCheck = false;
}

// If all waves not completed yet
if (!global.allWavesDone) {
    if (global.delayBetweenWavesTimer &gt;= 0) {
        global.delayBetweenWavesTimer -= (1 / room_speed) * global.timeScale;
        initWave = true;
    }
    else {
        if (initWave) {
            global.currentWave ++;
            zombiesForWave = global.currentWave * zombiesIncForWave;
            initWave = false;
            global.waveCompleted = false;
            zombiesSpawned = 0;
            // Increase spawn chances of each zombie by their specified
            // amount each round
            heavyZombieSpawnChance += heavyZombieSpawnChanceIncrease;
            runnerZombieSpawnChance += runnerZombieSpawnChanceIncrease;
        }
        
        // If not at total zombies for this wave yet   
        if (zombiesSpawned &lt; zombiesForWave) {
            // If still spawning zombies and not preventing spawn
            if (zombieSpawnDelayTimer &lt; 0 &amp;&amp; !preventSpawn) {
                if (instance_exists(obj_zombieSpawn)) {
                    // Spawn at random spawn point
                    spawnPoint = instance_find(obj_zombieSpawn, round(random(instance_number(obj_zombieSpawn))));
                    // Choose what to spawn there
                    
                    if (random(1) &gt;= (1 - heavyZombieSpawnChance)) {
                        instance_create(spawnPoint.x, spawnPoint.y, obj_heavyZombie);
                    }
                    else if (random(1) &gt;= (1 - runnerZombieSpawnChance)) {
                        instance_create(spawnPoint.x, spawnPoint.y, obj_runnerZombie);
                    }
                    else {
                        instance_create(spawnPoint.x, spawnPoint.y, obj_zombie);
                    }
                    zombiesSpawned ++;
                }
                
                // reset spawn delay timer
                zombieSpawnDelayTimer = zombieSpawnDelay;
            }
            else {
                zombieSpawnDelayTimer -= 1 / room_speed;
            }
        }
        else { // If done spawning new zombies
            if (scr_totalEnemyCount() == 0) { // if wave completed
                global.delayBetweenWavesTimer = global.delayBetweenWaves;
                global.waveCompleted = true;
                
                // Check if all waves have been completed
                if (global.currentWave &gt;= global.amtOfWaves) {
                    global.allWavesDone = true;
                    
                    obj_guiController.triggerAllWavesDoneText = true;
                    
                    if (room == mp_town) {
                        scr_addDialogue("Looks like the town is finally clear.", spr_daveSpeaker, 0);
                        scr_addDialogue("Execellent work Dave! Now the families in the nearby cities may finally be able to move back in to their hometown. Now I'm hearing a lot of activity over in the southwest forest, you think you could check that out?", spr_randySpeaker, 0);
                        scr_addDialogue("Awesome, will do.", spr_daveSpeaker, 0);
                        scr_addDialogue("Cool, because I'm tired of hearing complaints about that area sooo...", spr_randySpeaker, 0);
                        scr_addDialogue("Yea yea, I'm on it..", spr_daveSpeaker, 0); 
                    }
                }
                else {
                // If not all waves have been completed yet
                    obj_guiController.triggerWaveCompletionText = true;
                    audio_play_sound(snd_deep_boom, 3, false);
                }
            }
        }
    }
}

if (mouse_check_button(mb_middle)) {
    instance_create(mouse_x, mouse_y, obj_zombie);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
