<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_normal);

currentMenu = "Main";
currentSave = "";
menuX = 0;
menuY = 0;
menuXOff = 0;
menuYOff = 0;
menuScale = 4;

// Map info
map[0] = mp_town;
mapName[0] = "The Town";
mapDesc[0] = "An abandoned and ruined town that used to house people and have a small community. Until, you know, the zombie apocolapse happenned.";
mapImage[0] = spr_mapTown;
mapDifficulty[0] = "Easy";

map[1] = mp_testRoom;
mapName[1] = "The Testing Room";
mapDesc[1] = "Tests are done here. Warning: Lame.";
mapImage[1] = "NULL";
mapDifficulty[1] = "Easy";

// Map viewing variables
mapViewed = 0; // the current map being shown (which index?)
showMapDifficultyWindow = false; // showing the map difficulty window gui for the current viewed map?
mapInit = false; // Is the current viewed map starting?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu Items and do Menu Stuff

// Constant slight menu offsets based on mouse pos, also tween it slightly
menuXOff += ((-(mouse_x - (room_width / 2)) / 8) - menuXOff) * 0.25;
menuYOff += ((-(mouse_y - (room_height / 2)) / 8) - menuYOff) * 0.25;
var drawMenuX = menuX + menuXOff;
var drawMenuY = menuY + menuYOff;

// Current menu names work in this way:
// -------------------------------------------------------------
// currentMenu = "Menu1-Menu2";
// this means that the menu is transitioning from Menu1 to Menu2
// -------------------------------------------------------------
// if (string_pos("Menu1", currentMenu) != -1)
// this means that if during a transitiion away or to Menu1 or in Menu1
// -------------------------------------------------------------

// Main Menu
if (string_pos("Main", currentMenu) != 0) {
   var _startX = drawMenuX + (room_width / 2) - ((sprite_get_width(spr_buttonMenu) * menuScale) / 2);
   var _startY = drawMenuY + (room_height / 2) - ((sprite_get_height(spr_buttonMenu) * menuScale) / 2);
   
   if (scr_buttonGuiSpriteText(_startX, _startY, spr_buttonMenu, menuScale, "Start", c_white) == 2) {
        currentMenu = "Main-Start";
   }
   
   _startY += 128;
   
   if (scr_buttonGuiSpriteText(_startX, _startY, spr_buttonMenu, menuScale, "Options", c_white) == 2) {
        currentMenu = "Main-Options";
   }
   
   _startY += 128;
   
   if (scr_buttonGuiSpriteText(_startX, _startY, spr_buttonMenu, menuScale, "Quit Game", c_white) == 2) {
        game_end();
   }
}

// Start Menu
if (string_pos("Start", currentMenu) != 0) {
    var _xOffset = room_width;
    var _yOffset = 0;
    var _startX = drawMenuX + (room_width / 2) - ((sprite_get_width(spr_buttonMenu) * menuScale) / 2) + _xOffset;
    var _startY = drawMenuY + (room_height / 2) - ((sprite_get_height(spr_buttonMenu) * menuScale) / 2) + _yOffset;
    
    // Back button
    var _backX = drawMenuX + _xOffset + (sprite_get_width(spr_arrowButton) * menuScale) + 128;
    var _backY = drawMenuY + _yOffset + (room_height / 2) - ((sprite_get_height(spr_arrowButton) * menuScale) / 2);
    if (scr_buttonGuiSpriteExt(_backX, _backY, spr_arrowButton, 0, -menuScale, menuScale) == 2) {
        currentMenu = "Start-Main";
    }
    
    // Show save buttons, if a save is used, show it faded and unclickable, else don't
    for (var i=0; i&lt;3; i++) {
        if (obj_save.saveUsed[i]) { // if save is used
            if (scr_buttonGuiSpriteText(_startX, _startY, spr_buttonMenu, menuScale, "Save " + string(i) + " (DATA)", c_green) == 2) {
                obj_save.saveNum = i; // make i the current save being used in game
                obj_save.saveUsed[i] = true; // mark as used
                currentMenu = "Start-LevelSelect";
            } 
        }
        else { // if save is not used
            if (scr_buttonGuiSpriteText(_startX, _startY, spr_buttonMenu, menuScale, "Save " + string(i) + " (FREE)", c_white) == 2) {
                    scr_createSave(i);
                    obj_save.saveNum = i; // make i the current save being used in game
                    obj_save.saveUsed[i] = true; // save is now used
                    currentMenu = "Start-LevelSelect";
            } 
        }
        _startY += 128;
    }
    
}

// LevelSelect Menu
if (string_pos("LevelSelect", currentMenu) != 0) {
   var _xOffset = room_width * 2;
   var _yOffset = 0;
   var _mapGuiX = drawMenuX + (room_width / 2) - ((sprite_get_width(spr_mapMenuGui) * menuScale) / 2) + _xOffset;
   var _mapGuiY = drawMenuY + (room_height / 2) - ((sprite_get_height(spr_mapMenuGui) * menuScale) / 2) + _yOffset;
   //var _mapImageX = _mapGuiX + (9 * menuScale);
   //var _mapImageY = _mapGuiY + (9 * menuScale);
   
   scr_mapMenuGui(_mapGuiX, 
    _mapGuiY, 
    map[mapViewed], 
    mapImage[mapViewed], 
    mapDesc[mapViewed], 
    menuScale);
}

// ************* Transitions *************

switch (currentMenu) {
    case "Main-Start":
        scr_menuMoveTransition("Start", 1, 0);
    break;
    case "Start-Main":
        scr_menuMoveTransition("Main", 0, 0);
    break;
    case "Start-LevelSelect":
        scr_menuMoveTransition("LevelSelect", 2, 0);
    break;
    case "LevelSelect-Start":
        scr_menuMoveTransition("Start", 1, 0);
    break;
}

if (currentMenu == "LevelSelect-Game") {
    //ds_map_clear(obj_save.saveDynamic); // clear to be reloaded when loading save (look at obj_save end step)
    obj_save.doLoadSaveIntoGame = true; // load save into game after map loads
    scr_deleteMapSave(obj_save.saveNum); // delete any map save, leave the dynamic data however
    room_goto(map[mapViewed]);
}

// Vignette
var _scale = (view_wport[0] / sprite_get_width(spr_vignette)) * 1.5; // drawscale
var _xOff = (view_wport[0] - (sprite_get_width(spr_vignette) * _scale)) / 2; // center x
var _yOff = (view_hport[0] - (sprite_get_height(spr_vignette) * _scale)) / 2; // center y

draw_set_blend_mode(bm_subtract);
draw_sprite_ext(spr_vignette, 0, 0 + _xOff, 0 + _yOff, _scale, _scale, 0, c_white, 1);
draw_set_blend_mode(bm_normal);

if (debug_mode) {
    draw_text(mouse_x, mouse_y, string(mouse_x - menuX) + " " + string(mouse_y - menuX));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
